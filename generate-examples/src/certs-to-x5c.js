// Reads EC P-256 PEM private key and certs and outputs a private and public JWK pair.
//
// PEM format for P-256 (prime256v1) private key
// -----BEGIN PRIVATE KEY-----
// <-- multi-line base64 encoding of ASN.1:
//   [0..35]: header (36 bytes)
//   [36..67]: private key (d value, 32 bytes)
//   [68..72]: public key header
//   [73]: 0x04 (uncompressed public key)
//   [74..105]: x
//   [106..137]: y
// -->
// -----END PRIVATE KEY-----
//
// PEM format of cert
// 

const fs = require('fs');
const program = require('commander');
const jose = require('node-jose');
const { Buffer } = require('buffer');

// PEM to DER encoding
// Drop the first and last lines (BEGIN/END markers), concatenate the others, base64-decode
const PEMtoDER = (pem) => Buffer.from(pem.split(/\r?\n/).slice(1,-2).join(), "base64");

// DER to JWK with x5c attribute 
const DERtoJWK = async (key, certs) => {
    const header = key.slice(0,36).toString('hex');
    const d = key.slice(36,68);//.toString('hex');
    const pubKeyHeader = key.slice(68,73).toString('hex');
    const compressed = key.slice(73,74).toString('hex');
    const x = key.slice(74,106);//.toString('hex');
    const y = key.slice(106,138);//.toString('hex');

    const jwk = await jose.JWK.asKey(
        {
            "kty":"EC",
            "use":"sig",
            "alg":"ES256",
            "crv":"P-256",
            "d":jose.util.base64url.encode(d),
            "x":jose.util.base64url.encode(x),
            "y":jose.util.base64url.encode(y),
            "x5c":certs.map(cert => cert.toString('base64'))
            // SHA-256 kid auto-generated by key import
        }
    );
    return {
        private: JSON.stringify(jwk.toJSON(true)),
        public:  JSON.stringify(jwk.toJSON(false))
    }
}

program.option('-k, --key <key>', 'path to the P-256 EC PEM private key');
program.option('-c, --cert <cert>', 'path to a certificate to add to the x5c chain (repeatable, add in chain order: leaf first, root last)', (cert, certs) => certs.concat([cert]), []);
program.option('-p, --public <public>', 'output path for the public JWK', 'issuer.jwks.public.json'); // TODO: add to JWKs if present
program.option('-s, --private <private>', 'output path for the private JWK', 'issuer.jwks.private.json'); // TODO: add to JWKs if present
program.parse(process.argv);
const options = program.opts();
if (!options.key || !options.cert) {
    console.log("Missing --key or --cert argument");
    program.help();
}
try {
    const keyFile = PEMtoDER(fs.readFileSync(options.key,'UTF-8'));
    const certFiles = options.cert.map(certPath => PEMtoDER(fs.readFileSync(certPath,'UTF-8')));
    DERtoJWK(keyFile, certFiles).then(keys => {
        // TODO: transform to key sets
        fs.writeFileSync(options.private, keys.private);
        fs.writeFileSync(options.public, keys.public);
    });
} catch (err) {
    console.log(err);
}

